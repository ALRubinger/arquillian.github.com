---
layout: guide
title: Getting Started
---
#content
  :textile
    <div class="header">
    h2. Getting Started

    This guide introduces you to Arquillian. After reading this guide, you'll be able to:

    * Add the Arquillian infrastructure to a Maven-based Java project
    * Write an Arquillian test case to assert the behavior of a CDI(Contexts and Dependency Injection) bean
    * Execute the Arquillian test case on multiple compatible containers

    You'll learn all of these skills by incorporating Arquillian to the test suite of a Java EE web application built with Maven.
    </div>

    h3(#assumptions). Assumptions

    The easiest way to get started with Arquillian is to incorporate it into the test suite of a project build that offers dependency management. Today, the most well-known build tool in this category is Maven. This guide will navigate you to your first green bar using a sample Maven project.

    p(info). %Arquillian does not depend on Maven, or any other build tool for that matter. It works just as well--if not better--when used in a project built using Ant or Gradle. Build tools that provide dependency management do provide an easier path to setting up Arquillian since Arquillian is distributed as multiple artifacts in the JBoss (Nexus) software repository.%

    This guide assumes you have Maven available, either in your command shell or your IDE. If you don't, please "install it now":http://maven.apache.org/download.html.

    h3(#create_new_project). Create New Project

    First, create a Maven-based Java project using the command below. _Copy the text after the @$@ and paste it into your command shell._

    bc(command).. $ mvn archetype:generate -DarchetypeGroupId=net.avh4.mvn.archetype \
    -DarchetypeArtifactId=java-1.6-archetype

    p. Respond to the prompts by entering the value shown after each double colon. Press the Enter key after each entry (as indicated by @<ENTER>@).

    bc.. Define value for property 'groupId': : org.arquillian.example <ENTER>
    Define value for property 'artifactId': : arquillian-tutorial <ENTER>
    Define value for property 'version': : <ENTER>
    Define value for property 'package': : <ENTER>
    Confirm properties configuration:
    groupId: org.arquillian.example
    artifactId: arquillian-tutorial
    version: 1.0-SNAPSHOT
    package: org.arquillian.example
    Y: : <ENTER>

    p. This command will generate a Maven-based Java project in a directory named @arquillian-tutorial@ with the file structure shown below:

    * src/
    ** main/
    *** java/ - Place all application Java source files here (under Java package)
    *** resources/ - Place all application configuration files here
    * src/
    ** test/
    *** java/ - Place all test Java source files heres (under Java package)
    *** resources/ - Place all test configuration files here (e.g., arquillian.xml)
    * pom.xml - The Maven build file. Tells Maven how your project should be built.

    The generator also creates a Java package named @org.arquillian.example@ underneath the two @java@ folders. You should put your Java source files under this package rather than at the root.

    The project is pre-configured to use Java 6 and JUnit 4.8, the minimum required versions of Java and JUnit for using Arquillian, respectively.

    p(info). %Arquillian also supports TestNG 5. However, we'll be using JUnit throughout this guide.%

    Go ahead and open up the @pom.xml@ in your editor. You should see an XML file containing basic project information, a build section and a dependencies section.
    
    You can remove all the @<dependency>@ elements below the junit dependency as they aren't required. After making that change, you should end up with the following contents (trimmed slightly for brevity):

    div(filename). pom.xml

    bc(prettify).. <project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="
            http://maven.apache.org/POM/4.0.0
            http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>org.arquillian.example</groupId>
        <artifactId>arquillian-tutorial</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
        <name>arquillian-tutorial</name>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.3.2</version>
                    <configuration>
                        <source>1.6</source>
                        <target>1.6</target>
                    </configuration>
                </plugin>
            </plugins>
        </build>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.8.1</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>

    p. In this tutorial, we're going to be testing Java EE 6 components. To compile these components, you need to add the Java EE 6 API to the classpath. Open up the @pom.xml@ file once again and add the following code fragment directly inside the @<dependencies>@ element. Here's how the dependencies section should look once your done:

    bc(prettify).. <dependencies>
        <dependency>
            <groupId>org.jboss.spec</groupId>
            <artifactId>jboss-javaee-web-6.0</artifactId>
            <version>2.0.0.Final</version>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    p. The foundation of your project is ready. Now let's open the project in Eclipse so we can start writing some code.

    h3(#import_project). Open Project in Eclipse

    When developing a Java project, you'll likely use an IDE, such as Eclipse. That's why Arquillian has been designed to be IDE friendly, meaning you can run Arquillian tests from the IDE without making unconventional changes. So let's start taking advantage of the IDE immediately.

    To open the project in Eclipse, begin by launching Eclipse. Since this is a Maven project, you'll need the "Maven Integration for Eclipse":http://eclipse.org/m2e (m2e) plugin. If you don't already have it installed, follow these simple steps:

    # Select @Help > Eclipse Marketplace...@ from the main menu
    # Type "maven" in the Find input field (no quotes) and press Enter
    # Click the Install button next to Maven Integration for Eclipse
    # Complete the install wizard, then restart Eclipse if prompted

    Once you have the Maven Integration plugin installed, follow these steps to open the project:

    # Select @File > Import...@ from the main menu
    # Type "existing maven" in the input source field
    # Select the option Existing Maven Projects, then click the Next button
    # Click the Browse... button
    # Navigate the project folder on your filesystem, then click the OK button
    # Click the Finish button to open the project

    Eclipse will recognize the Maven project and open it in the Project Navigator view. If you expand the project, it look similar to this image:

    !/images/guides/arquillian_tutorial_eclipse_project.png!

    Now we can really get down to business!

    h3(#create_component). Create Component to Test

#sidebar
  %h3.chapter_header Chapters
  %ol.chapters
    %li
      %a{ :href=>'#assumptions' } Assumptions
    %li
      %a{ :href=>'#create_new_project' } Create New Project
    %li
      %a{ :href=>'#open_project' } Open Project in Eclipse
    %li
      %a{ :href=>'#create_component' } Create Component to Test
