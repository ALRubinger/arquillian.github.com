Arquillian Overview
===================

WARNING: DRAFT

.Community Project

Arquillian is the missing link in Java EE development. Developers have long had to fend for themselves in the testing stage, burdened with bootstrapping the infrastructure on which the test depends. That's time lost, and it places a high barrier to entry on integration testing. Arquillian tears down that barrier.

Arquillian is a container-oriented test framework. It picks up where unit tests leave off, targeting the integration of application code inside a real runtime environment. Just as Java EE 5 simplified the server programming model by providing declarative services for POJOs, Arquillian equips tests with container lifecycle management and enrichment. With Arquillian, you write a basic test case and annotate it with declarative behavior that says, "run with Arquillian." Launching the test is as simple as right-clicking the test class in the IDE and selecting Run As > JUnit or TestNG test. Based on the classpath configuration, Arquillian starts or binds to the target container (JBoss AS, GlassFish, OpenEJB, etc) and deploys the test case bundled with the test archive defined in the @Deployment method. Your test executes inside the container and enjoys all the same services as an application component. That means you get dependency and resource injection into the test, you can access EJBs, you can load a persistence unit, you can get a handle to a database connection, etc. Yet, on the surface, it looks like any other unit test. (Arquillian also has a client execution mode, which only deploys the test archive, not the test case).

Instead of bringing your runtime to the test, Arquillian brings your test to the runtime.

Features of Arquillian include:

* Runnable from both JUnit and TestNG
* Abstracts out server lifecycle and deployment
* Injects resources like managed beans, EJBs or objects from JNDI into the test instance
* Zero reliance upon a formal build; can be run or debugged from IDEs like Eclipse, IDEA, NetBeans
* Supports remote and embedded containers: JBoss AS, GlassFish, Jetty, Tomcat, OpenEJB, OSGi and more on the way
* Enables pass-by-reference between the test and the server, even if the server is in another JVM from the test launcher
* Provides an extensible SPI - plug in your own containers and take advantage of the Arquillian bus to provide services to the test

No longer does writing a test involve system administration tasks. No more custom scripts or copy-paste Maven configuration. No more full builds. No more test classpath mayhem. No more looking up resources manually in JNDI. No more reliance on coarse-grained, black-box testing.

Arquillian keeps you focused on the test, while enjoying the services provided by the container. And it's turning heads.

Find out more at http://arquillian.org
